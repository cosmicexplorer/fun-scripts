#!/bin/bash

# FIXME: make it so this works with filenames with quotes, slashes, and brackets

# TODO: make it so this doesn't require another hostname; it can just get it
# from the sender (maybe???)

# make sure both hosts are on the same network, or both are public, or
# something! otherwise this won't work cause they can't directly access each
# other lol

if [ "$1" = "-h" ] || [ "$1" = "" ]; then
  cat <<EOF
\$1: dir (do NOT end with /)
\$2: host
\$3: port
\$4: second port
\$5: compression alg: "bzip2"/"gzip"
TODO:
\$6: service: "ssh"/"nc"
\${@:7}: find args
EOF
  exit 1
fi


compressionAlgs="bzip2
gzip"

# check for commands
if ! hash nc; then
  echo "command 'nc' not found" 1>&2
  exit -1
fi


# check for actual algs
foundAlg="false"
for alg in compressionAlgs; do
  if [ "$5" = $alg ]; then
    foundAlg="true"
  fi
done
if [ "foundAlg" = "false" ]; then
  echo "compression algorithm '$5' not found. select from:" 1>&2
  echo $compressionAlgs
  exit -1
fi


# utility functions
function push_until_connect {
  while ! nc -c $1 $2; do
    sleep .1
  done
}

finalFile=""
function cleanup_last_file {
  res=$?
  rm -f $finalFile
  exit $res
}
trap cleanup_last_file SIGHUP SIGINT SIGTERM

# send list of all files to remote host
# if we ever need to use this multiple times over a massive number of files
# we'll use some database or something; this would likely have timestamps too
find . -type f ${@:7} -printf "\"%p\"\n" | sort | push_until_connect $2 $3

# file arguments sent in from sender are same order of files received from tar!

# get number of files from sender, quit if none new
numFiles="$(nc -l -p $3)"
if [ "$numFiles" -eq 0 ]; then
  echo "all files already synced!"
  exit
fi

curNumFiles="$numFiles"

# get size of each file in bytes
fileSizes="$(nc -l -p $3)"
numBytes="$(echo "$fileSizes" | paste -sd+ - | bc)"

# get bytes extracted

# do the copying now
numExtracted=0
totalExtracted=0

if ! hash pv; then
  # if not given, no worries
  nc -l -p $4 | while read line; do
    echo "REMOTE: $line"
  done &
fi

nc -l -p $3 | if hash pv; then pv -pter; else cat; fi | \
  tar --extract "--$5" --file=- -v 2>&1 | \
  while read -r line; do
    finalFile="$line"
    ((numExtracted++))
    sizeExtracted="$(echo "$fileSizes" | head -n1)"
    totalExtracted="$(echo "$totalExtracted + $sizeExtracted" | bc)"
    ((curNumFiles--))
    echo -ne "extracted $line: file $numExtracted/$numFiles ("
    echo -n "$(echo "scale=2; $numExtracted / $numFiles * 100" | bc -l)%), "
    echo -ne "byte $totalExtracted / $numBytes ("
    echo "$(echo "scale=2; $totalExtracted / $numBytes * 100" | bc -l)%)"
    fileSizes="$(echo "$fileSizes" | tail -n"$curNumFiles")"
  done

cleanup_last_file

echo "synced!"
