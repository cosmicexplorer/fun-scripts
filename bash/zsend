#!/bin/bash

# make sure both hosts are on the same network, or both are public, or
# something! otherwise this won't work cause they can't directly access each
# other lol

if [ "$1" = "-h" ] || [ "$1" = "" ]; then
  cat <<EOF
\$1: dir (do NOT end with /)
\$2: host
\$3: port
\$4: second port
\$5: compression alg: "bzip2"/"gzip"
TODO:
\$6: service: "ssh"/"nc"
\${@:7}: find args
EOF
  exit 1
fi


compressionAlgs="bzip2
gzip"

if ! hash nc; then
  echo "command 'nc' not found" 1>&2
  exit -1
fi

# check for actual algs
foundAlg="false"
for alg in compressionAlgs; do
  if [ "$5" = $alg ]; then
    foundAlg="true"
  fi
done
if [ "foundAlg" = "false" ]; then
  echo "compression algorithm '$5' not found. select from:" 1>&2
  echo -e $compressionAlgs
  exit -1
fi


# utility functions
function push_until_connect {
  while ! nc -c $1 $2; do
    sleep .1
  done
}

# listen for all files by remote host and diff to get needed files
filesList="$(diff <(nc -l -p $3) \
<(find "$1" -type f ${@:7} -printf "\"%p\"\n" | sort) \
--unchanged-line-format="" --old-line-format="")"

filesList="$(echo $filesList | sed -e 's/\" /\n/g' -e 's/\"//g')"
# echo $filesList | sed -e 's/\" /\n/g' -e 's/\"//g' | wc -l

# now tell them how many files they're getting and how big they are
numFiles="$(echo "$filesList" | wc -l)"
if [ "$filesList" = "" ]; then
  numFiles=0
fi
echo "$numFiles" | push_until_connect $2 $3

if [ "$numFiles" -ne 0 ]; then
  # now tell them how big the files are
  # should be a for loop, but whitespace characters in filenames are annoying
  echo "$filesList" | while read file; do
    du -b "$file" | grep -Eo "^[[:digit:]]+"
  done | push_until_connect $2 $3
  echo "$filesList" | xargs -d "\n" tar "--$5" --create --to-stdout | \
    if hash pv; then pv -pter; else cat; fi | \
    push_until_connect $2 $3 2> >(tee >(push_until_connect $2 $4) 1>&2)
fi

echo "synced!"
